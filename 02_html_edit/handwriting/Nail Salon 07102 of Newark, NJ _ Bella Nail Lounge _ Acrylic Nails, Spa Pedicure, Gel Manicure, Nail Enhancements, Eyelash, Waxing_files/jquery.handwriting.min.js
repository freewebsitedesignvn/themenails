(function (e) { e.fn.HandWriting = function (n) { function l() { f++; if (f < i.drawings.length) { o[f] = new Image; o[f].onload = l; o[f].src = i.drawings[f] } else { u = "ready" } } var r = { xml_file: "letters_verdana.xml", line_offset_x: 0, line_offset_y: 0, text_lineWidth: 1, text_color: "rgba(127,127,127,1)", steps_between_letters: 3, letter_steps: 3, show_pen: true, pen_image: "handwriting/pen.png", anim_layers: 0, hw_scale: .5, line_height: 50, isc: [], stroke_above_image: false, drawings: [], paused: false, replay: false, wait_after_finish_duration: 2e3, clear_frames: false, finish_effect: "none", finish_effect_duration: 1e3, animate: false, image_rotation: "random", random_pos_x: .2, random_pos_y: .2, text_align: "left", use_stroke: true, complete: null }, i = e.extend({}, r, n); if (i.ms === undefined) i.ms = Math.ceil(100 / i.letter_steps); if (i.ms > 30) i.ms = 30; var s = i.paused; var o = []; var u = "ready"; var f = 0; if (i.drawings.length) { u = "loading"; o[f] = new Image; o[f].onload = l; o[f].onerror = function () { u = "error" }; o[f].src = i.drawings[f] } this.pause_anim = function () { s = true }; this.play_anim = function () { s = false }; return this.each(function () { var n = []; var r; var f = []; var l; var c; var h; var p; var v; var m; var g; var y; var b; var w; var E; var S; var x; var T; var N; var C, L, A, O, M, _; var D; var P; var H; var B = []; var j; var F = []; var I = i.line_height; var q = i.line_offset_x; var R = i.line_offset_y; var U = i.hw_scale; var z = i.show_pen; var W = i.replay; var X = i.wait_after_finish_duration; var V = i.text_color; var J = i.text_lineWidth; var K = i.drawings; var Q = i.animate; var G = i.anim_layers; var Y = i.clear_frames; if (Q) G = i.drawings.length; var Z = i.finish_effect; var et = i.finish_effect_duration; var tt = i.image_rotation; var nt = i.random_pos_x; var rt = i.random_pos_y; var it = i.text_align; var st = i.use_stroke; N = e(this); if (N.attr("style").indexOf("text-align") !== -1) it = N.css("text-align"); var ot = e.trim(N.html()); N.html(""); y = N.width(); b = N.height(); e.get(i.xml_file, function (ut) { N.init = function () { r = false; n = []; f = []; l = 0; c = 0; h = 0; p = 0; v = 0; F = []; word_index_arr = []; var t; var s = 0; var u = 0; var m = 0; var g = false; N.empty(); var b = 0; if (i.stroke_above_image) b = 4; N.append('<canvas id="myCanvasReady" width="' + N.width() + '" height="' + N.height() + '" style="position: absolute; top: 0px; left: 0px; z-index: ' + b + ';"></canvas>'); canvas = N.children("#myCanvasReady").get(0); S = canvas.getContext("2d"); S.strokeStyle = V; S.lineWidth = i.text_lineWidth; S.lineCap = "square"; b = 1; if (i.stroke_above_image) b = 5; N.append('<canvas id="myCanvasDrawing" width="' + N.width() + '" height="' + N.height() + '" style="position: absolute; top: 0px; left: 0px; z-index: ' + b + ';"></canvas>'); canvas = N.children("#myCanvasDrawing").get(0); x = canvas.getContext("2d"); x.lineCap = "square"; if (o.length > 0) { N.append('<canvas id="myCanvasImg" width="' + N.width() + '" height="' + N.height() + '" style="position: absolute; top: 0px; left: 0px; z-index: 2;"></canvas>'); N.append('<canvas id="ImgDrawing" width="' + N.width() + '" height="' + N.height() + '" style="position: absolute; top: 0px; left: 0px; z-index: 3;"></canvas>'); canvas = N.children("#myCanvasImg").get(0); w = canvas.getContext("2d"); canvas = N.children("#ImgDrawing").get(0); E = canvas.getContext("2d") } if (i.show_pen) { N.append('<div id="pen" style="position: absolute; top: 0px; left: 0px; z-index: 10; display: none"><img src="' + i.pen_image + '"  /></div>') } space_width = parseFloat(e(ut).find("ls").attr("s_w")); letter_height = parseFloat(e(ut).find("ls").attr("l_h")); next_letter_x = 0; get_word_index = true; word_index = 0; t = 0; e.each(e.parseHTML(ot), function (r, o) { span_text = o.nodeValue; H = V; B = []; for (d = 0; d < K.length; d++) { B[d] = d } j = J; if (typeof e(o).html() != "undefined") { B = []; span_text = e(o).html(); span_text = e(o).html(span_text).text(); if (e(o).prop("style").color != "") { H = e(o).css("color") } if (typeof e(o).data("images") != "undefined") { string_images = String(e(o).data("images")); parts = string_images.split(","); for (var c = 0; c < parts.length; c++) { more_parts = parts[c].split("-"); if (more_parts.length == 1) { B.push(Number(more_parts[0])) } else if (more_parts.length == 2) { si = Number(more_parts[0]); ei = Number(more_parts[1]); if (typeof si === "number" && si % 1 === 0 && typeof ei === "number" && ei % 1 === 0) { if (si > ei) for (var h = si; h >= ei; h--) B.push(h); else for (var h = si; h <= ei; h++) B.push(h) } } } } if (typeof e(o).data("width") != "undefined") j = Number(e(o).data("width")) } span_text = span_text.replace(/<br>/g, "|"); n[r] = []; if (Q) G = B.length; for (var c = 0; c < G; c++) { n[r].push([-1, 0, 0, 0, 0]) } F[r] = B; for (c = 0; c < span_text.length; c++) { if (span_text.charAt(c) != " " && get_word_index) { get_word_index = false; word_index = l; if (word_index > 0) word_index++; word_indent = next_letter_x } if (span_text.charAt(c) == "|" || span_text.charAt(c) == " ") { get_word_index = true; next_letter_x += space_width; word_index_arr.push(word_index); m = space_width; u = s; if (span_text.charAt(c) == "|") { if (c > 0 && span_text.charAt(c - 1) == "|") { v++ } g = true } else { s += m * U } } else { letter = e(ut).find('l[id="' + span_text.charAt(c) + '"]'); m = parseFloat(letter.attr("w")); s += m * U; if (l > 0) { steps = i.steps_between_letters; f[l++] = Array(A, O, (parseFloat(letter.find("c:first").attr("s_x")) + next_letter_x + q) * U, (parseFloat(letter.find("c:first").attr("s_y")) + v * I + R + letter_height) * U, C, L, steps, 0, 0, 0, r, -1) } width_reached = false; letter.find("c").each(function (t) { t = e(this); C = parseFloat(t.attr("s_x")) + next_letter_x; L = parseFloat(t.attr("s_y")) + v * I; A = parseFloat(t.attr("f_x")) + next_letter_x; O = parseFloat(t.attr("f_y")) + v * I; M = parseFloat(t.attr("c_x")) + next_letter_x; _ = parseFloat(t.attr("c_y")) + v * I; C = (C + q) * U; L = (L + R + letter_height) * U; A = (A + q) * U; O = (O + R + letter_height) * U; M = (M + q) * U; _ = (_ + R + letter_height) * U; a = parseFloat(t.attr("a")); steps = i.letter_steps; if (C > y - q || A > y - q) { width_reached = true } f[l++] = Array(C, L, A, O, M, _, steps, a, H, j, r, -1) }); if (width_reached || g) { if (word_indent > 1) { v++; for (k = word_index; k < l; k++) { f[k][0] -= word_indent * U; f[k][2] -= word_indent * U; f[k][4] -= word_indent * U; f[k][1] += I * U; f[k][3] += I * U; f[k][5] += I * U } if (word_index > 0) { C -= word_indent * U; A -= word_indent * U; M -= word_indent * U; L += I * U; O += I * U; _ += I * U } for (k = t; k < word_index; k++) { f[k][11] = u } if (!g) s -= space_width * U; s -= u; t = word_index; next_letter_x -= word_indent; word_indent = 0 } g = false } next_letter_x += m } } }); for (var T = 0; T < f.length; T++) { if (f[T][11] == -1) f[T][11] = s; if (it == "center") { f[T][0] += (y - f[T][11]) / 2 - q; f[T][2] += (y - f[T][11]) / 2 - q; f[T][4] += (y - f[T][11]) / 2 - q } else if (it == "right") { f[T][0] += y - (f[T][11] + 2 * q); f[T][2] += y - (f[T][11] + 2 * q); f[T][4] += y - (f[T][11] + 2 * q) } if (T > 0 && Math.abs(f[T][0] - f[T - 1][2]) > space_width * U / 2) { f[T - 1][2] = f[T][0]; f[T - 1][3] = f[T][1]; f[T - 1][6] *= 5 } } }; N.handwrite = function () { grow = function () { var t; var s; var u; var f; if (Y) E.clearRect(0, 0, y, b); T = false; for (var c = 0; c < F.length; c++) { var h = false; if (n[c].length > 0) { for (var p = n[c].length - 1; p >= 0; p--) { a = n[c][n[c].length - 1 - p][0]; if (a != -1) { if (Q) { a = F[n[c][n[c].length - 1 - p][4]][p] } h = true; l = n[c][n[c].length - 1 - p][1]; d = n[c][n[c].length - 1 - p][2]; rot = n[c][n[c].length - 1 - p][3]; t = o[a].width; s = o[a].height; u = rot + p / G * Math.PI / 2; if (Q) u = rot; if (a > i.isc.length - 1) f = (p + 1) / G * i.isc[0]; else f = (p + 1) / G * i.isc[a]; if (Q) f = i.isc[0]; E.save(); E.translate(l, d); E.rotate(u); E.scale(f, f); E.drawImage(o[a], -t / 2, -s / 2, t, s); E.restore() } } } T = h || T } for (var c = 0; c < F.length; c++) { if (n[c].length > 0 && n[c][0][0] != -1) { a = n[c][0][0]; if (Q) a = F[c][F[c].length - 1]; l = n[c][0][1]; d = n[c][0][2]; rot = n[c][0][3]; t = o[a].width; s = o[a].height; u = rot + (n[c].length - 1) / G * Math.PI / 2; if (Q) u = rot; if (a > i.isc.length - 1) f = n[c].length / G * i.isc[0]; else f = n[c].length / G * i.isc[a]; if (Q) f = i.isc[0]; w.save(); w.translate(l, d); w.rotate(u); w.scale(f, f); w.drawImage(o[a], -t / 2, -s / 2, t, s); w.restore() } } if (r) { for (var c = 0; c < F.length; c++) { n[c].push([-1, 0, 0, 0, 0]); if (Q) { if (n[c].length > F[c].length) n[c].shift() } else { if (n[c].length > G) n[c].shift() } } if (!T) { clearInterval(g); if (e.isFunction(i.complete)) { i.complete.call(this) } setTimeout(function () { if (Z == "fade") { if (typeof N.children("#ImgDrawing") != "undefined") N.children("#ImgDrawing").animate({ opacity: 0 }, et); if (typeof N.children("#myCanvasDrawing") != "undefined") N.children("#myCanvasDrawing").animate({ opacity: 0 }, et); if (typeof N.children("#myCanvasImg") != "undefined") N.children("#myCanvasImg").animate({ opacity: 0 }, et); N.children("#myCanvasReady").animate({ opacity: 0 }, et, function () { if (W) { N.init(); m = setInterval(N.handwrite, i.ms) } }) } else { if (W) { N.init(); m = setInterval(N.handwrite, i.ms) } } }, X) } } }; if (u == "error") { clearInterval(m) } else if (u == "ready" && !s) { P = D; C = f[c][0]; L = f[c][1]; A = f[c][2]; O = f[c][3]; M = f[c][4]; _ = f[c][5]; steps = f[c][6]; D = f[c][7]; first_step_x = (M - C) / steps; first_step_y = (_ - L) / steps; first_curve_step = 1 / steps; t = h * first_curve_step; dest_x = (1 - t) * (1 - t) * C + 2 * t * (1 - t) * M + t * t * A; dest_y = (1 - t) * (1 - t) * L + 2 * t * (1 - t) * _ + t * t * O; control_x = C + h * first_step_x; control_y = L + h * first_step_y; x.beginPath(); if (z) { N.children("#pen").css("top", parseInt(dest_y) + "px"); N.children("#pen").css("left", parseInt(dest_x) + "px"); if (z && N.children("#pen").css("display") == "none") N.children("#pen").fadeIn() } x.moveTo(C, L); x.quadraticCurveTo(control_x, control_y, dest_x, dest_y); if (D > 0 && st) { x.strokeStyle = f[c][8]; x.lineWidth = f[c][9]; x.stroke() } var a; var l; var d; var v; if (D == 0 && h == steps) { v = f[c][10]; if (Q) p = 0; a = p % F[v].length; p++; a = Number(F[v][a]); l = dest_x; d = dest_y; if (n[v].length > 0) { rot = Math.random() * Math.PI * 2; if (tt == "fixed") rot = 0; n[v][n[v].length - 1][0] = a; n[v][n[v].length - 1][1] = l; n[v][n[v].length - 1][2] = d; n[v][n[v].length - 1][3] = rot; n[v][n[v].length - 1][4] = v; if (Q) { if (n[v].length > F[v].length) n[v].shift() } else { if (n[v].length > G) n[v].shift() } } for (var k = v - 1; k >= 0; k--) { n[k].push([-1, 0, 0, 0, 0]); if (Q) { if (n[k].length > F[k].length) n[k].shift() } else { if (n[k].length > G) n[k].shift() } } } else if (c < f.length && o.length > 0) { if (D) { a = p % F[f[c][10]].length; a = Number(F[f[c][10]][a]); if (a != -1) { if (Q || a > i.isc.length - 1) myisc = i.isc[0]; else myisc = i.isc[a]; l = dest_x + (Math.random() * o[a].width - o[a].width / 2) * myisc * nt; d = dest_y + (Math.random() * o[a].height - o[a].height / 2) * myisc * rt; rot = Math.random() * Math.PI * 2; if (tt == "fixed") rot = 0 } else { l = 0; d = 0; rot = 0 } } else { a = -1; l = 0; d = 0; rot = 0 } v = f[c][10]; n[v].push([a, l, d, rot, v]); if (Q) { if (n[v].length > F[v].length) n[v].shift() } else { if (n[v].length > G) n[v].shift() } for (var k = v - 1; k >= 0; k--) { n[k].push([-1, 0, 0, 0, 0]); if (Q) { if (n[k].length > F[k].length) n[k].shift() } else { if (n[k].length > G) n[k].shift() } } } h++; if (D) p++; if (h > steps) { if (Y) x.clearRect(0, 0, y, b); S.beginPath(); S.moveTo(C, L); S.quadraticCurveTo(M, _, A, O); if (D > 0 && st) { S.strokeStyle = f[c][8]; S.lineWidth = f[c][9]; S.stroke() } c++; h = 1; if (c == f.length) { clearInterval(m); r = true; g = setInterval(grow, i.ms); if (i.show_pen) { N.children("#pen").fadeOut() } } } grow() } }; N.init(); m = setInterval(N.handwrite, i.ms) }) }) } })(jQuery)